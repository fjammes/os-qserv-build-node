# See http://docs.openstack.org/developer/heat/template_guide/hot_spec.html

heat_template_version: 2015-10-15

description: Launch Qserv build node 

parameters:
    prefix:
        description: Resource prefix
        label: Resource prefix
        type: string
    key_name:
        description: Name of an existing key pair to use for the instance
        label: Key Name
        type: string
        constraints:
            - custom_constraint: nova.keypair
    flavor:
        description: Flavor for build node
        label: Flavor ID
        type: string
    image_id:
        description: UUID of source image
        label: Image ID
        type: string
    network_name:
        description: Name of the network to connect to
        label: Network Name
        type: string
        constraints:
            - custom_constraint: neutron.network
    subnet_name:
        description: Name of the subnet to connect to
        label: Subnet Name
        type: string
        constraints:
            - custom_constraint: neutron.subnet
    public_network:
        description: Public network id
        type: string

resources:
## SSH Gateway ##
    gw_instance:
        type: OS::Nova::Server
        properties:
            key_name: { get_param: key_name }
            flavor: { get_param: flavor }
            image: { get_param: image_id }
            name: 
                str_replace: 
                template: $PREFIX-qserv-build
                    params: 
                        $PREFIX: { get_param: prefix }

            networks:
                - port: { get_resource: gw_port }
            user_data: { get_file: cloud-config.yaml }
            user_data_format: RAW
    gw_port:
        type: OS::Neutron::Port
        properties:
            network: { get_param: network_name }
            fixed_ips:
                - subnet_id: { get_param: subnet_name }
    public_ip:
        type: OS::Neutron::FloatingIP
        properties:
            floating_network_id: { get_param: public_network }
            port_id: { get_resource: gw_port } 

outputs:
    gateway_ip:
        description: IP to connect to
        value: { get_attr: [ public_ip, floating_ip_address ] }
# EOF
